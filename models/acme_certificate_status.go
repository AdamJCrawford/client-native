// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AcmeCertificateStatus ACME certificate status
//
// Status of a single ACME certificate from runtime.
//
// swagger:model acme_certificate_status
type AcmeCertificateStatus struct {

	// ACME section which generated the certificate.
	AcmeSection string `json:"acme_section,omitempty"`

	// Certificate name
	Certificate string `json:"certificate,omitempty"`

	// Duration until certificate expiry.
	ExpiriesIn string `json:"expiries_in,omitempty"`

	// Certificate expiration date.
	// Format: date-time
	// +kubebuilder:validation:Format=date-time
	ExpiryDate strfmt.DateTime `json:"expiry_date,omitempty"`

	// Duration until the next planned renewal.
	RenewalIn string `json:"renewal_in,omitempty"`

	// Planned date for certificate renewal.
	// Format: date-time
	// +kubebuilder:validation:Format=date-time
	ScheduledRenewal strfmt.DateTime `json:"scheduled_renewal,omitempty"`

	// State of the ACME task, either "Running" or "Scheduled".
	State string `json:"state,omitempty"`
}

// Validate validates this acme certificate status
func (m *AcmeCertificateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledRenewal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcmeCertificateStatus) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_date", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AcmeCertificateStatus) validateScheduledRenewal(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledRenewal) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduled_renewal", "body", "date-time", m.ScheduledRenewal.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this acme certificate status based on context it is used
func (m *AcmeCertificateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AcmeCertificateStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcmeCertificateStatus) UnmarshalBinary(b []byte) error {
	var res AcmeCertificateStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

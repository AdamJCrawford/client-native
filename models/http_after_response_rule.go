// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPAfterResponseRule HTTP after Response Rule
//
// HAProxy HTTP after response rule configuration (corresponds to http-after-response directives)
//
// swagger:model http_after_response_rule
type HTTPAfterResponseRule struct {

	// cond
	// Enum: [if unless]
	Cond string `json:"cond,omitempty"`

	// cond test
	CondTest string `json:"cond_test,omitempty"`

	// hdr format
	HdrFormat string `json:"hdr_format,omitempty"`

	// hdr match
	HdrMatch string `json:"hdr_match,omitempty"`

	// hdr method
	HdrMethod string `json:"hdr_method,omitempty"`

	// hdr name
	HdrName string `json:"hdr_name,omitempty"`

	// index
	// Required: true
	Index *int64 `json:"index"`

	// status
	// Maximum: 999
	// Minimum: 100
	Status int64 `json:"status,omitempty"`

	// status reason
	StatusReason string `json:"status_reason,omitempty"`

	// strict mode
	// Enum: [on off]
	StrictMode string `json:"strict_mode,omitempty"`

	// type
	// Required: true
	// Enum: [add-header allow del-header replace-header replace-value set-header set-status set-var strict-mode unset-var]
	Type string `json:"type"`

	// var expr
	VarExpr string `json:"var_expr,omitempty"`

	// var name
	// Pattern: ^[^\s]+$
	VarName string `json:"var_name,omitempty"`

	// var scope
	// Pattern: ^[^\s]+$
	VarScope string `json:"var_scope,omitempty"`
}

// Validate validates this http after response rule
func (m *HTTPAfterResponseRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCond(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrictMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVarName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVarScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var httpAfterResponseRuleTypeCondPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpAfterResponseRuleTypeCondPropEnum = append(httpAfterResponseRuleTypeCondPropEnum, v)
	}
}

const (

	// HTTPAfterResponseRuleCondIf captures enum value "if"
	HTTPAfterResponseRuleCondIf string = "if"

	// HTTPAfterResponseRuleCondUnless captures enum value "unless"
	HTTPAfterResponseRuleCondUnless string = "unless"
)

// prop value enum
func (m *HTTPAfterResponseRule) validateCondEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpAfterResponseRuleTypeCondPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPAfterResponseRule) validateCond(formats strfmt.Registry) error {

	if swag.IsZero(m.Cond) { // not required
		return nil
	}

	// value enum
	if err := m.validateCondEnum("cond", "body", m.Cond); err != nil {
		return err
	}

	return nil
}

func (m *HTTPAfterResponseRule) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *HTTPAfterResponseRule) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinimumInt("status", "body", int64(m.Status), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(m.Status), 999, false); err != nil {
		return err
	}

	return nil
}

var httpAfterResponseRuleTypeStrictModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpAfterResponseRuleTypeStrictModePropEnum = append(httpAfterResponseRuleTypeStrictModePropEnum, v)
	}
}

const (

	// HTTPAfterResponseRuleStrictModeOn captures enum value "on"
	HTTPAfterResponseRuleStrictModeOn string = "on"

	// HTTPAfterResponseRuleStrictModeOff captures enum value "off"
	HTTPAfterResponseRuleStrictModeOff string = "off"
)

// prop value enum
func (m *HTTPAfterResponseRule) validateStrictModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpAfterResponseRuleTypeStrictModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPAfterResponseRule) validateStrictMode(formats strfmt.Registry) error {

	if swag.IsZero(m.StrictMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrictModeEnum("strict_mode", "body", m.StrictMode); err != nil {
		return err
	}

	return nil
}

var httpAfterResponseRuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["add-header","allow","del-header","replace-header","replace-value","set-header","set-status","set-var","strict-mode","unset-var"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpAfterResponseRuleTypeTypePropEnum = append(httpAfterResponseRuleTypeTypePropEnum, v)
	}
}

const (

	// HTTPAfterResponseRuleTypeAddHeader captures enum value "add-header"
	HTTPAfterResponseRuleTypeAddHeader string = "add-header"

	// HTTPAfterResponseRuleTypeAllow captures enum value "allow"
	HTTPAfterResponseRuleTypeAllow string = "allow"

	// HTTPAfterResponseRuleTypeDelHeader captures enum value "del-header"
	HTTPAfterResponseRuleTypeDelHeader string = "del-header"

	// HTTPAfterResponseRuleTypeReplaceHeader captures enum value "replace-header"
	HTTPAfterResponseRuleTypeReplaceHeader string = "replace-header"

	// HTTPAfterResponseRuleTypeReplaceValue captures enum value "replace-value"
	HTTPAfterResponseRuleTypeReplaceValue string = "replace-value"

	// HTTPAfterResponseRuleTypeSetHeader captures enum value "set-header"
	HTTPAfterResponseRuleTypeSetHeader string = "set-header"

	// HTTPAfterResponseRuleTypeSetStatus captures enum value "set-status"
	HTTPAfterResponseRuleTypeSetStatus string = "set-status"

	// HTTPAfterResponseRuleTypeSetVar captures enum value "set-var"
	HTTPAfterResponseRuleTypeSetVar string = "set-var"

	// HTTPAfterResponseRuleTypeStrictMode captures enum value "strict-mode"
	HTTPAfterResponseRuleTypeStrictMode string = "strict-mode"

	// HTTPAfterResponseRuleTypeUnsetVar captures enum value "unset-var"
	HTTPAfterResponseRuleTypeUnsetVar string = "unset-var"
)

// prop value enum
func (m *HTTPAfterResponseRule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpAfterResponseRuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPAfterResponseRule) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *HTTPAfterResponseRule) validateVarName(formats strfmt.Registry) error {

	if swag.IsZero(m.VarName) { // not required
		return nil
	}

	if err := validate.Pattern("var_name", "body", string(m.VarName), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *HTTPAfterResponseRule) validateVarScope(formats strfmt.Registry) error {

	if swag.IsZero(m.VarScope) { // not required
		return nil
	}

	if err := validate.Pattern("var_scope", "body", string(m.VarScope), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPAfterResponseRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPAfterResponseRule) UnmarshalBinary(b []byte) error {
	var res HTTPAfterResponseRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
